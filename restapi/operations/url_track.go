// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/MicahParks/terse-URL/models"
)

// URLTrackHandlerFunc turns a function with the right signature into a url track handler
type URLTrackHandlerFunc func(URLTrackParams, *models.JWTInfo) middleware.Responder

// Handle executing the request and returning a response
func (fn URLTrackHandlerFunc) Handle(params URLTrackParams, principal *models.JWTInfo) middleware.Responder {
	return fn(params, principal)
}

// URLTrackHandler interface for that can handle valid url track params
type URLTrackHandler interface {
	Handle(URLTrackParams, *models.JWTInfo) middleware.Responder
}

// NewURLTrack creates a new http.Handler for the url track operation
func NewURLTrack(ctx *middleware.Context, handler URLTrackHandler) *URLTrack {
	return &URLTrack{Context: ctx, Handler: handler}
}

/*URLTrack swagger:route GET /api/track/{shortened} urlTrack

Get the tracking info for the shortened URL.

*/
type URLTrack struct {
	Context *middleware.Context
	Handler URLTrackHandler
}

func (o *URLTrack) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewURLTrackParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTInfo
	if uprinc != nil {
		principal = uprinc.(*models.JWTInfo) // this is really a models.JWTInfo, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
