// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewFrontendParams creates a new FrontendParams object
// no default values defined in spec.
func NewFrontendParams() FrontendParams {

	return FrontendParams{}
}

// FrontendParams contains all the bound params for the frontend operation
// typically these are obtained from a http.Request
//
// swagger:parameters frontend
type FrontendParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The pre-populated original URL (for the form).
	  In: query
	*/
	Original *string
	/*
	  Required: true
	  In: path
	*/
	Path string
	/*The pre-populated shortened URL (for the form).
	  In: query
	*/
	Shortened *string
	/*The case insensitive substring to search for a shortened URL (for the table).
	  In: query
	*/
	Substring *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFrontendParams() beforehand.
func (o *FrontendParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qOriginal, qhkOriginal, _ := qs.GetOK("original")
	if err := o.bindOriginal(qOriginal, qhkOriginal, route.Formats); err != nil {
		res = append(res, err)
	}

	rPath, rhkPath, _ := route.Params.GetOK("path")
	if err := o.bindPath(rPath, rhkPath, route.Formats); err != nil {
		res = append(res, err)
	}

	qShortened, qhkShortened, _ := qs.GetOK("shortened")
	if err := o.bindShortened(qShortened, qhkShortened, route.Formats); err != nil {
		res = append(res, err)
	}

	qSubstring, qhkSubstring, _ := qs.GetOK("substring")
	if err := o.bindSubstring(qSubstring, qhkSubstring, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindOriginal binds and validates parameter Original from query.
func (o *FrontendParams) bindOriginal(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Original = &raw

	return nil
}

// bindPath binds and validates parameter Path from path.
func (o *FrontendParams) bindPath(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Path = raw

	return nil
}

// bindShortened binds and validates parameter Shortened from query.
func (o *FrontendParams) bindShortened(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Shortened = &raw

	return nil
}

// bindSubstring binds and validates parameter Substring from query.
func (o *FrontendParams) bindSubstring(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Substring = &raw

	return nil
}
