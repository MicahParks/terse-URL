// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/MicahParks/terse-URL/models"
)

// URLRandomHandlerFunc turns a function with the right signature into a url random handler
type URLRandomHandlerFunc func(URLRandomParams, *models.JWTInfo) middleware.Responder

// Handle executing the request and returning a response
func (fn URLRandomHandlerFunc) Handle(params URLRandomParams, principal *models.JWTInfo) middleware.Responder {
	return fn(params, principal)
}

// URLRandomHandler interface for that can handle valid url random params
type URLRandomHandler interface {
	Handle(URLRandomParams, *models.JWTInfo) middleware.Responder
}

// NewURLRandom creates a new http.Handler for the url random operation
func NewURLRandom(ctx *middleware.Context, handler URLRandomHandler) *URLRandom {
	return &URLRandom{Context: ctx, Handler: handler}
}

/*URLRandom swagger:route POST /api/random urlRandom

Give a full URL and get a shortened URL that will redirect to it.

*/
type URLRandom struct {
	Context *middleware.Context
	Handler URLRandomHandler
}

func (o *URLRandom) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewURLRandomParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTInfo
	if uprinc != nil {
		principal = uprinc.(*models.JWTInfo) // this is really a models.JWTInfo, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// URLRandomBody URL random body
//
// swagger:model URLRandomBody
type URLRandomBody struct {

	// URL
	URL string `json:"URL,omitempty"`

	// delete at
	// Format: date-time
	DeleteAt strfmt.DateTime `json:"deleteAt,omitempty"`
}

// Validate validates this URL random body
func (o *URLRandomBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeleteAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *URLRandomBody) validateDeleteAt(formats strfmt.Registry) error {

	if swag.IsZero(o.DeleteAt) { // not required
		return nil
	}

	if err := validate.FormatOf("original"+"."+"deleteAt", "body", "date-time", o.DeleteAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *URLRandomBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *URLRandomBody) UnmarshalBinary(b []byte) error {
	var res URLRandomBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
