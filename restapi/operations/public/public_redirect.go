// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PublicRedirectHandlerFunc turns a function with the right signature into a public redirect handler
type PublicRedirectHandlerFunc func(PublicRedirectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PublicRedirectHandlerFunc) Handle(params PublicRedirectParams) middleware.Responder {
	return fn(params)
}

// PublicRedirectHandler interface for that can handle valid public redirect params
type PublicRedirectHandler interface {
	Handle(PublicRedirectParams) middleware.Responder
}

// NewPublicRedirect creates a new http.Handler for the public redirect operation
func NewPublicRedirect(ctx *middleware.Context, handler PublicRedirectHandler) *PublicRedirect {
	return &PublicRedirect{Context: ctx, Handler: handler}
}

/* PublicRedirect swagger:route GET /{shortenedURL} public publicRedirect

Typically a web browser would visit this endpoint, then get redirected.

Use the shortened URL. It will redirect to the full URL if it has not expired.

*/
type PublicRedirect struct {
	Context *middleware.Context
	Handler PublicRedirectHandler
}

func (o *PublicRedirect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPublicRedirectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
