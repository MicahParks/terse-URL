// Code generated by go-swagger; DO NOT EDIT.

package frontend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FrontendStaticHandlerFunc turns a function with the right signature into a frontend static handler
type FrontendStaticHandlerFunc func(FrontendStaticParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FrontendStaticHandlerFunc) Handle(params FrontendStaticParams) middleware.Responder {
	return fn(params)
}

// FrontendStaticHandler interface for that can handle valid frontend static params
type FrontendStaticHandler interface {
	Handle(FrontendStaticParams) middleware.Responder
}

// NewFrontendStatic creates a new http.Handler for the frontend static operation
func NewFrontendStatic(ctx *middleware.Context, handler FrontendStaticHandler) *FrontendStatic {
	return &FrontendStatic{Context: ctx, Handler: handler}
}

/* FrontendStatic swagger:route GET /frontend/{fileName} frontend frontendStatic

Files for the web frontend.

Frontend static assets: HTML, JS, etc are returned.

*/
type FrontendStatic struct {
	Context *middleware.Context
	Handler FrontendStaticHandler
}

func (o *FrontendStatic) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFrontendStaticParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
