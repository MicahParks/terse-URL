// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/MicahParks/terse-URL/models"
)

// URLDeleteHandlerFunc turns a function with the right signature into a url delete handler
type URLDeleteHandlerFunc func(URLDeleteParams, *models.JWTInfo) middleware.Responder

// Handle executing the request and returning a response
func (fn URLDeleteHandlerFunc) Handle(params URLDeleteParams, principal *models.JWTInfo) middleware.Responder {
	return fn(params, principal)
}

// URLDeleteHandler interface for that can handle valid url delete params
type URLDeleteHandler interface {
	Handle(URLDeleteParams, *models.JWTInfo) middleware.Responder
}

// NewURLDelete creates a new http.Handler for the url delete operation
func NewURLDelete(ctx *middleware.Context, handler URLDeleteHandler) *URLDelete {
	return &URLDelete{Context: ctx, Handler: handler}
}

/*URLDelete swagger:route DELETE /api/delete urlDelete

Delete the given shortened URL from the backend storage, cause the shortened URL to immediately expire.

*/
type URLDelete struct {
	Context *middleware.Context
	Handler URLDeleteHandler
}

func (o *URLDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewURLDeleteParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTInfo
	if uprinc != nil {
		principal = uprinc.(*models.JWTInfo) // this is really a models.JWTInfo, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
