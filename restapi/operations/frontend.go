// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FrontendHandlerFunc turns a function with the right signature into a frontend handler
type FrontendHandlerFunc func(FrontendParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FrontendHandlerFunc) Handle(params FrontendParams) middleware.Responder {
	return fn(params)
}

// FrontendHandler interface for that can handle valid frontend params
type FrontendHandler interface {
	Handle(FrontendParams) middleware.Responder
}

// NewFrontend creates a new http.Handler for the frontend operation
func NewFrontend(ctx *middleware.Context, handler FrontendHandler) *Frontend {
	return &Frontend{Context: ctx, Handler: handler}
}

/*Frontend swagger:route GET /frontend/{path} frontend

Get a frontend asset to interact with the application via a web browser.

*/
type Frontend struct {
	Context *middleware.Context
	Handler FrontendHandler
}

func (o *Frontend) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFrontendParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
