// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SystemAliveHandlerFunc turns a function with the right signature into a system alive handler
type SystemAliveHandlerFunc func(SystemAliveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SystemAliveHandlerFunc) Handle(params SystemAliveParams) middleware.Responder {
	return fn(params)
}

// SystemAliveHandler interface for that can handle valid system alive params
type SystemAliveHandler interface {
	Handle(SystemAliveParams) middleware.Responder
}

// NewSystemAlive creates a new http.Handler for the system alive operation
func NewSystemAlive(ctx *middleware.Context, handler SystemAliveHandler) *SystemAlive {
	return &SystemAlive{Context: ctx, Handler: handler}
}

/* SystemAlive swagger:route GET /api/alive system systemAlive

Used by Caddy or other reverse proxy to determine if the service is alive.

Used by Caddy or other reverse proxy to determine if the service is alive.

*/
type SystemAlive struct {
	Context *middleware.Context
	Handler SystemAliveHandler
}

func (o *SystemAlive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSystemAliveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
