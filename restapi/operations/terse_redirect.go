// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TerseRedirectHandlerFunc turns a function with the right signature into a terse redirect handler
type TerseRedirectHandlerFunc func(TerseRedirectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TerseRedirectHandlerFunc) Handle(params TerseRedirectParams) middleware.Responder {
	return fn(params)
}

// TerseRedirectHandler interface for that can handle valid terse redirect params
type TerseRedirectHandler interface {
	Handle(TerseRedirectParams) middleware.Responder
}

// NewTerseRedirect creates a new http.Handler for the terse redirect operation
func NewTerseRedirect(ctx *middleware.Context, handler TerseRedirectHandler) *TerseRedirect {
	return &TerseRedirect{Context: ctx, Handler: handler}
}

/*TerseRedirect swagger:route GET /{shortened} terseRedirect

Use the shortened URL. It will redirect to the full URL if it has not expired.

*/
type TerseRedirect struct {
	Context *middleware.Context
	Handler TerseRedirectHandler
}

func (o *TerseRedirect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTerseRedirectParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
