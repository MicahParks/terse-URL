// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShortenedURLPrefixHandlerFunc turns a function with the right signature into a shortened URL prefix handler
type ShortenedURLPrefixHandlerFunc func(ShortenedURLPrefixParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShortenedURLPrefixHandlerFunc) Handle(params ShortenedURLPrefixParams) middleware.Responder {
	return fn(params)
}

// ShortenedURLPrefixHandler interface for that can handle valid shortened URL prefix params
type ShortenedURLPrefixHandler interface {
	Handle(ShortenedURLPrefixParams) middleware.Responder
}

// NewShortenedURLPrefix creates a new http.Handler for the shortened URL prefix operation
func NewShortenedURLPrefix(ctx *middleware.Context, handler ShortenedURLPrefixHandler) *ShortenedURLPrefix {
	return &ShortenedURLPrefix{Context: ctx, Handler: handler}
}

/* ShortenedURLPrefix swagger:route GET /api/prefix api shortenedUrlPrefix

Client's web browser is requesting what HTTP prefix all shortened URLs have.

Provides the HTTP prefix all shortened URLs have.

*/
type ShortenedURLPrefix struct {
	Context *middleware.Context
	Handler ShortenedURLPrefixHandler
}

func (o *ShortenedURLPrefix) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewShortenedURLPrefixParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
