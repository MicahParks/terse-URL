// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TerseExportOneHandlerFunc turns a function with the right signature into a terse export one handler
type TerseExportOneHandlerFunc func(TerseExportOneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TerseExportOneHandlerFunc) Handle(params TerseExportOneParams) middleware.Responder {
	return fn(params)
}

// TerseExportOneHandler interface for that can handle valid terse export one params
type TerseExportOneHandler interface {
	Handle(TerseExportOneParams) middleware.Responder
}

// NewTerseExportOne creates a new http.Handler for the terse export one operation
func NewTerseExportOne(ctx *middleware.Context, handler TerseExportOneHandler) *TerseExportOne {
	return &TerseExportOne{Context: ctx, Handler: handler}
}

/*TerseExportOne swagger:route GET /api/export/{shortened} api terseExportOne

TerseExportOne terse export one API

*/
type TerseExportOne struct {
	Context *middleware.Context
	Handler TerseExportOneHandler
}

func (o *TerseExportOne) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTerseExportOneParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
