// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/MicahParks/terseurl/models"
)

// ExportHandlerFunc turns a function with the right signature into a export handler
type ExportHandlerFunc func(ExportParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ExportHandlerFunc) Handle(params ExportParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ExportHandler interface for that can handle valid export params
type ExportHandler interface {
	Handle(ExportParams, *models.Principal) middleware.Responder
}

// NewExport creates a new http.Handler for the export operation
func NewExport(ctx *middleware.Context, handler ExportHandler) *Export {
	return &Export{Context: ctx, Handler: handler}
}

/* Export swagger:route POST /api/export api export

Export Terse and Visits data for the given shortened URLs.

Export Terse and Visits data for the given shortened URLs. If shortenedURLs is null, then export all shortened URLs.

*/
type Export struct {
	Context *middleware.Context
	Handler ExportHandler
}

func (o *Export) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewExportParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
