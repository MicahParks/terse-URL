// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TerseSummaryHandlerFunc turns a function with the right signature into a terse summary handler
type TerseSummaryHandlerFunc func(TerseSummaryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TerseSummaryHandlerFunc) Handle(params TerseSummaryParams) middleware.Responder {
	return fn(params)
}

// TerseSummaryHandler interface for that can handle valid terse summary params
type TerseSummaryHandler interface {
	Handle(TerseSummaryParams) middleware.Responder
}

// NewTerseSummary creates a new http.Handler for the terse summary operation
func NewTerseSummary(ctx *middleware.Context, handler TerseSummaryHandler) *TerseSummary {
	return &TerseSummary{Context: ctx, Handler: handler}
}

/* TerseSummary swagger:route POST /api/summary api terseSummary

Provide Terse summary data for the requested shortened URLs.

Terse summary data includes the shortened URL, the original URL, the type of redirect, and the number of visits.

*/
type TerseSummary struct {
	Context *middleware.Context
	Handler TerseSummaryHandler
}

func (o *TerseSummary) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTerseSummaryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
