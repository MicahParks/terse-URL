// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TerseDeleteOneHandlerFunc turns a function with the right signature into a terse delete one handler
type TerseDeleteOneHandlerFunc func(TerseDeleteOneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TerseDeleteOneHandlerFunc) Handle(params TerseDeleteOneParams) middleware.Responder {
	return fn(params)
}

// TerseDeleteOneHandler interface for that can handle valid terse delete one params
type TerseDeleteOneHandler interface {
	Handle(TerseDeleteOneParams) middleware.Responder
}

// NewTerseDeleteOne creates a new http.Handler for the terse delete one operation
func NewTerseDeleteOne(ctx *middleware.Context, handler TerseDeleteOneHandler) *TerseDeleteOne {
	return &TerseDeleteOne{Context: ctx, Handler: handler}
}

/* TerseDeleteOne swagger:route DELETE /api/delete/{shortened} api terseDeleteOne

Delete Terse and or Visits data for the given shortened URL.

If only Terse data is deleted, the API user is responsible for cleaning up its Visits data before adding new Terse data under the same shortened URL.

*/
type TerseDeleteOne struct {
	Context *middleware.Context
	Handler TerseDeleteOneHandler
}

func (o *TerseDeleteOne) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTerseDeleteOneParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
