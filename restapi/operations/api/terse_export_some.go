// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TerseExportSomeHandlerFunc turns a function with the right signature into a terse export some handler
type TerseExportSomeHandlerFunc func(TerseExportSomeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TerseExportSomeHandlerFunc) Handle(params TerseExportSomeParams) middleware.Responder {
	return fn(params)
}

// TerseExportSomeHandler interface for that can handle valid terse export some params
type TerseExportSomeHandler interface {
	Handle(TerseExportSomeParams) middleware.Responder
}

// NewTerseExportSome creates a new http.Handler for the terse export some operation
func NewTerseExportSome(ctx *middleware.Context, handler TerseExportSomeHandler) *TerseExportSome {
	return &TerseExportSome{Context: ctx, Handler: handler}
}

/* TerseExportSome swagger:route POST /api/export/some api terseExportSome

Export Terse and Visits data for the given shortened URLs.

Export Terse and Visits data for the given shortened URLs.

*/
type TerseExportSome struct {
	Context *middleware.Context
	Handler TerseExportSomeHandler
}

func (o *TerseExportSome) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTerseExportSomeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
