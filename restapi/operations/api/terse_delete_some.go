// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/MicahParks/terseurl/models"
)

// TerseDeleteSomeHandlerFunc turns a function with the right signature into a terse delete some handler
type TerseDeleteSomeHandlerFunc func(TerseDeleteSomeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TerseDeleteSomeHandlerFunc) Handle(params TerseDeleteSomeParams) middleware.Responder {
	return fn(params)
}

// TerseDeleteSomeHandler interface for that can handle valid terse delete some params
type TerseDeleteSomeHandler interface {
	Handle(TerseDeleteSomeParams) middleware.Responder
}

// NewTerseDeleteSome creates a new http.Handler for the terse delete some operation
func NewTerseDeleteSome(ctx *middleware.Context, handler TerseDeleteSomeHandler) *TerseDeleteSome {
	return &TerseDeleteSome{Context: ctx, Handler: handler}
}

/* TerseDeleteSome swagger:route DELETE /api/delete/some api terseDeleteSome

Delete Terse and or Visits data for the given shortened URL.

If only Terse data is deleted, the API user is responsible for cleaning up its Visits data before adding new Terse data under the same shortened URL.

*/
type TerseDeleteSome struct {
	Context *middleware.Context
	Handler TerseDeleteSomeHandler
}

func (o *TerseDeleteSome) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTerseDeleteSomeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TerseDeleteSomeBody terse delete some body
//
// swagger:model TerseDeleteSomeBody
type TerseDeleteSomeBody struct {

	// Indicate if Terse and or Visits data should be deleted.
	Delete *models.Delete `json:"delete,omitempty"`

	// shortened u r ls
	ShortenedURLs []string `json:"shortenedURLs"`
}

// Validate validates this terse delete some body
func (o *TerseDeleteSomeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDelete(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TerseDeleteSomeBody) validateDelete(formats strfmt.Registry) error {
	if swag.IsZero(o.Delete) { // not required
		return nil
	}

	if o.Delete != nil {
		if err := o.Delete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("info" + "." + "delete")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terse delete some body based on the context it is used
func (o *TerseDeleteSomeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TerseDeleteSomeBody) contextValidateDelete(ctx context.Context, formats strfmt.Registry) error {

	if o.Delete != nil {
		if err := o.Delete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("info" + "." + "delete")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TerseDeleteSomeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TerseDeleteSomeBody) UnmarshalBinary(b []byte) error {
	var res TerseDeleteSomeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
