// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TerseDeleteHandlerFunc turns a function with the right signature into a terse delete handler
type TerseDeleteHandlerFunc func(TerseDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TerseDeleteHandlerFunc) Handle(params TerseDeleteParams) middleware.Responder {
	return fn(params)
}

// TerseDeleteHandler interface for that can handle valid terse delete params
type TerseDeleteHandler interface {
	Handle(TerseDeleteParams) middleware.Responder
}

// NewTerseDelete creates a new http.Handler for the terse delete operation
func NewTerseDelete(ctx *middleware.Context, handler TerseDeleteHandler) *TerseDelete {
	return &TerseDelete{Context: ctx, Handler: handler}
}

/*TerseDelete swagger:route DELETE /api/delete api terseDelete

Delete all Terse and or Visits data.

All Terse and or Visits data will be deleted according to the deletion information specified.

*/
type TerseDelete struct {
	Context *middleware.Context
	Handler TerseDeleteHandler
}

func (o *TerseDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTerseDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
