// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/MicahParks/terse-URL/models"
)

// URLCustomHandlerFunc turns a function with the right signature into a url custom handler
type URLCustomHandlerFunc func(URLCustomParams, *models.JWTInfo) middleware.Responder

// Handle executing the request and returning a response
func (fn URLCustomHandlerFunc) Handle(params URLCustomParams, principal *models.JWTInfo) middleware.Responder {
	return fn(params, principal)
}

// URLCustomHandler interface for that can handle valid url custom params
type URLCustomHandler interface {
	Handle(URLCustomParams, *models.JWTInfo) middleware.Responder
}

// NewURLCustom creates a new http.Handler for the url custom operation
func NewURLCustom(ctx *middleware.Context, handler URLCustomHandler) *URLCustom {
	return &URLCustom{Context: ctx, Handler: handler}
}

/*URLCustom swagger:route POST /api/custom urlCustom

Give a full URL and a custom shortened URL, create the redirection to it. Custom URLs cannot be "api".

*/
type URLCustom struct {
	Context *middleware.Context
	Handler URLCustomHandler
}

func (o *URLCustom) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewURLCustomParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTInfo
	if uprinc != nil {
		principal = uprinc.(*models.JWTInfo) // this is really a models.JWTInfo, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// URLCustomBody URL custom body
//
// swagger:model URLCustomBody
type URLCustomBody struct {

	// delete at
	// Format: date-time
	DeleteAt strfmt.DateTime `json:"deleteAt,omitempty"`

	// original URL
	OriginalURL string `json:"originalURL,omitempty"`

	// shortened URL
	ShortenedURL string `json:"shortenedURL,omitempty"`
}

// Validate validates this URL custom body
func (o *URLCustomBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeleteAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *URLCustomBody) validateDeleteAt(formats strfmt.Registry) error {

	if swag.IsZero(o.DeleteAt) { // not required
		return nil
	}

	if err := validate.FormatOf("tersePair"+"."+"deleteAt", "body", "date-time", o.DeleteAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *URLCustomBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *URLCustomBody) UnmarshalBinary(b []byte) error {
	var res URLCustomBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
