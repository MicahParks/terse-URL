// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MediaPreview media preview
//
// swagger:model MediaPreview
type MediaPreview struct {

	// audio URL
	AudioURL string `json:"audioURL,omitempty"`

	// canonical URL
	CanonicalURL string `json:"canonicalURL,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// determiner
	Determiner string `json:"determiner,omitempty"`

	// image URL
	ImageURL string `json:"imageURL,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// locale alt
	LocaleAlt string `json:"localeAlt,omitempty"`

	// site name
	SiteName string `json:"siteName,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// twitter
	Twitter *Twitter `json:"twitter,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// video URL
	VideoURL string `json:"videoURL,omitempty"`
}

// Validate validates this media preview
func (m *MediaPreview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTwitter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MediaPreview) validateTwitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Twitter) { // not required
		return nil
	}

	if m.Twitter != nil {
		if err := m.Twitter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twitter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MediaPreview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaPreview) UnmarshalBinary(b []byte) error {
	var res MediaPreview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
