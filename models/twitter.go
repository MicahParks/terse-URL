// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Twitter twitter
//
// swagger:model Twitter
type Twitter struct {

	// card
	// Enum: [app player summary summary_large_image]
	Card string `json:"card,omitempty"`

	// creator
	Creator string `json:"creator,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// image URL
	ImageURL string `json:"imageURL,omitempty"`

	// site
	Site string `json:"site,omitempty"`

	// site ID
	SiteID string `json:"siteID,omitempty"`

	// stream URL
	StreamURL string `json:"streamURL,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this twitter
func (m *Twitter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var twitterTypeCardPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["app","player","summary","summary_large_image"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		twitterTypeCardPropEnum = append(twitterTypeCardPropEnum, v)
	}
}

const (

	// TwitterCardApp captures enum value "app"
	TwitterCardApp string = "app"

	// TwitterCardPlayer captures enum value "player"
	TwitterCardPlayer string = "player"

	// TwitterCardSummary captures enum value "summary"
	TwitterCardSummary string = "summary"

	// TwitterCardSummaryLargeImage captures enum value "summary_large_image"
	TwitterCardSummaryLargeImage string = "summary_large_image"
)

// prop value enum
func (m *Twitter) validateCardEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, twitterTypeCardPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Twitter) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	// value enum
	if err := m.validateCardEnum("card", "body", m.Card); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Twitter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Twitter) UnmarshalBinary(b []byte) error {
	var res Twitter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
