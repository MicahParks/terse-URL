swagger: "2.0"

basePath: "/"

host: "localhost:30000" # TODO Change if you found this off the internet and want to run it yourself.

info:
  description: "The Terse URL shortener."
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
  title: "Terse URL"
  version: "0.0.1"

tags:
  - description: "Endpoints to perform operations on Terse data."
    name: "api"
  - description: "Endpoints that are publicly accessible."
    name: "public"
  - description: "Endpoints required by the system that are not public facing and do not affect Terse data."
    name: "system"

schemes:
  - "http"

paths:
  /api/alive:
    get:
      summary: "Used by Caddy or other reverse proxy to determine if the service is alive."
      description: "Any non-200 response means the service is not alive."
      operationId: "alive"
      responses:
        200:
          description: "Service is alive."
      tags:
        - "system"

  /api/delete:
    delete:
      consumes:
        - "application/json"
      summary: "Delete all Terse and or Visits data."
      description: "All Terse and or Visits data will be deleted according to the deletion information specified."
      operationId: "terseDelete"
      parameters:
        - description: "A JSON object containing the deletion information. If Terse or Visits data is marked for
        deletion, it will all be deleted."
          in: "body"
          name: "delete"
          required: true
          schema:
            $ref: "#/definitions/Delete"
      responses:
        200:
          description: ""
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - "api"

  /api/delete/{shortened}:
    delete:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      summary: "Delete Terse and or Visits data for the given shortened URL."
      description: "If only Terse data is deleted, the API user is responsible for cleaning up its Visits data before
      adding new Terse data under the same shortened URL."
      operationId: "terseDeleteOne"
      parameters:
        - description: "Indicate if Terse and or Visits data should be deleted."
          in: "body"
          name: "delete"
          required: true
          schema:
            $ref: "#/definitions/Delete"
        - description: "The shortened URL whose data should be deleted."
          in: "path"
          name: "shortened"
          required: true
          type: "string"
      responses:
        200:
          description: "The shortened URL's data was successfully deleted from the backend storage."
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - "api"

  /api/export:
    get:
      produces:
        - "application/json"
      summary: "Export all Terse and Visits data from the backend."
      description: "Depending on the underlying storage and amount of data, this may take a while."
      operationId: "terseExport"
      responses:
        200:
          description: "The export was successfully retrieved."
          schema:
            description: "All of the Terse and Visits data from the backend."
            type: "object"
            additionalProperties:
              $ref: "#/definitions/Export"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - "api"

  /api/export/{shortened}:
    get:
      produces:
        - "application/json"
      summary: "Export Terse and Visits data for the given shortened URL."
      description: ""
      operationId: "terseExportOne"
      parameters:
        - description: "The shortened URL to get the export for."
          in: "path"
          name: "shortened"
          required: true
          type: "string"
      responses:
        200:
          description: "The export was successfully retrieved."
          schema:
            $ref: "#/definitions/Export"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - "api"

  /api/import:
    post:
      consumes:
        - "application/json"
      summary: "Import existing Terse and Visits data for the given shortened URLs."
      description: "Any imported data will overwrite existing data. Unless deletion information is specified. In that
      case all Terse or Visits data can be deleted before importing the new data."
      operationId: "terseImport"
      parameters:
        - description: "A JSON object containing the deletion information. If Terse or Visits data is marked for
        deletion, it will all be deleted. An object matching shortened URLs to their previously exported data is also
        required."
          in: "body"
          name: "importDelete"
          required: true
          schema:
            type: "object"
            properties:
              delete:
                $ref: "#/definitions/Delete"
              import:
                additionalProperties:
                  $ref: "#/definitions/Export"
      responses:
        200:
          description: ""
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - "api"

  /api/read/{shortened}:
    get:
      produces:
        - "application/json"
      summary: "Read the Terse data for the given shortened URL."
      description: ""
      operationId: "terseRead"
      parameters:
        - description: "The shortened URL to get the Terse data for."
          in: "path"
          name: "shortened"
          required: true
          type: "string"
      responses:
        200:
          description: "The Terse data was successfully retrieved."
          schema:
            $ref: "#/definitions/Terse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - "api"

  /api/visits/{shortened}:
    get:
      produces:
        - "application/json"
      summary: "Get the Visits data for the given shortened URL."
      operationId: "terseVisits"
      parameters:
        - description: "The shortened URL to get the s data for."
          in: "path"
          name: "shortened"
          required: true
          type: "string"
      responses:
        200:
          description: "The Visits data was successfully retrieved."
          schema:
            description: "The visit data for the given shortened URL."
            type: "array"
            items:
              $ref: "#/definitions/Visit"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - "api"

  /api/write/{operation}: # TODO Include blurb about how including social media link preview will cause 200 instead of 302.
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      summary: "Perform a write operation on Terse data for a given shortened URL."
      description: '"insert" will fail if the shortened URL already exists. "update" will fail if the shortened URL does
      not already exist. "upsert" will only fail if there is a failure interacting with the underlying storage. If no
      shortened URL is included in the given Terse data, one will be generated randomly and returned in the response.'
      operationId: "terseWrite"
      parameters:
        - description: "The Terse data, with an optional shortened URL. If no shortened URL is given, one will be
        generated randomly and returned in the response."
          in: "body"
          name: "terse"
          required: true
          schema:
            $ref: "#/definitions/TerseOptionalShortened"
        - description: "The write operation to perform with the Terse data."
          in: "path"
          enum:
            - "insert"
            - "update"
            - "upsert"
          name: "operation"
          required: true
          type: "string"
      responses:
        200:
          description: "The write operation was successful."
          schema:
            description: "The shortened URL affected."
            type: "string"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - "api"

  # IDs are always 9 characters or greater, so they can be put at the base path as long as all other paths are 8
  # characters or less.
  /{shortened}:
    get:
      summary: "Typically a web browser would visit this endpoint, then get redirected."
      description: "Use the shortened URL. It will redirect to the full URL if it has not expired."
      operationId: "terseRedirect"
      parameters:
        - in: "path"
          name: "shortened"
          required: true
          type: "string"
      responses: # TODO Add 200 response for when social media link previews are enabled.
        302:
          description: "An HTTP response that will redirect to the shortened URL's full URL."
          headers:
            Location:
              description: "The full URL that the redirect leads to."
              type: "string"
        404:
          description: "The shortened URL expired or never existed."
      tags:
        - "public"


definitions:

  # Schema for deleting Terse and Visits data.
  Delete:
    properties:
      terse:
        default: true
        type: "boolean"
      visits:
        default: true
        type: "boolean"

  # Schema for Terse export. It contains Terse and Visits data for a shortened URL.
  Export:
    properties:
      terse:
        $ref: "#/definitions/Terse"
      visits:
        type: "array"
        items:
          $ref: "#/definitions/Visit"
    type: "object"

  # Schema for error response body.
  Error:
    properties:
      code:
        type: "integer"
      message:
        type: "string"
    required:
      - "code"
      - "message"
    type: "object"

  # Schema for social media previews.
  MediaPreview:
    properties:
      imageURL:
        type: "string"
      title:
        type: "string"
      type:
        type: "string"
      canonicalURL:
        type: "string"
      audioURL:
        type: "string"
      description:
        type: "string"
      determiner:
        type: "string"
      locale:
        type: "string"
      localeAlt:
        type: "string"
      siteName:
        type: "string"
      videoURL:
        type: "string"
      twitter:
        type: "object"
        $ref: "#/definitions/Twitter"
    required:
      - "imageURL"
      - "title"
      - "type"
      - "canonicalURL"

  # Schema for a Terse URL, which represented a shortened URL and original pair plus metadata.
  Terse:
    properties:
      originalURL:
        type: "string"
      mediaPreview:
        $ref: "#/definitions/MediaPreview"
      shortenedURL:
        type: "string"
    required:
      - "originalURL"
      - "shortenedURL"

  # Schema for a Terse URL, with an optional shortened URL.
  TerseOptionalShortened:
    properties:
      originalURL:
        type: "string"
      mediaPreview:
        $ref: "#/definitions/MediaPreview"
      shortenedURL:
        type: "string"
    required:
      - "originalURL"

  # Schema for Twitter OG meta tags.
  Twitter:
    properties:
      card:
        enum:
          - "app"
          - "player"
          - "summary"
          - "summary_large_image"
        type: "string"
      creator:
        type: "string"
      description:
        type: "string"
      imageURL:
        type: "string"
      site:
        type: "string"
      siteID:
        type: "string"
      streamURL:
        type: "string"
      title:
        type: "string"

  # Schema for tracking visits to shortened links.
  Visit:
    properties:
      accessed:
        type: "string"
        format: "date-time"
      ip:
        type: "string"
      headers:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            type: "string"
    required:
      - "accessed"
      - "ip"
